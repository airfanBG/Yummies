// <auto-generated />
using System;
using Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "606eb4f9-4fe1-474a-b226-0eb17bcd0f55",
                            ConcurrencyStamp = "7096c0ee-046c-4847-bd8f-b5664c219c5a",
                            Name = "ADMIN"
                        },
                        new
                        {
                            Id = "4200e8fd-9cff-4eba-97e9-a3f89453b082",
                            ConcurrencyStamp = "440114ca-be1f-48df-8115-ff64e686da4b",
                            Name = "CHEFF"
                        },
                        new
                        {
                            Id = "0df2850f-0e8f-45cb-b9c1-cc17071bf21f",
                            ConcurrencyStamp = "2e185cad-ac93-4b9c-a003-768c9fafcc02",
                            Name = "CUSTOMER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Models.Models.Category", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CategoryName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = "15f9b12b-7a13-4bd7-a743-d218f01cd62c",
                            CategoryName = "Soups",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Image = "soup.jpg"
                        },
                        new
                        {
                            Id = "8ec4e65f-5ab9-4b69-9587-a66949725fcb",
                            CategoryName = "Meals",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Image = "meal.jpg"
                        },
                        new
                        {
                            Id = "a6aadab4-f1fa-4be1-aea6-b3d4bebdaa69",
                            CategoryName = "Desserts",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Image = "desserts.jpg"
                        },
                        new
                        {
                            Id = "0b8cf308-8c0f-4fed-a37d-b8b7b1eca95f",
                            CategoryName = "Drinks",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Image = "drinks.jpg"
                        },
                        new
                        {
                            Id = "eba58732-68f5-4402-9b43-c53c273be3ae",
                            CategoryName = "Vines",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Image = "wine.jpg"
                        },
                        new
                        {
                            Id = "3fa2ca26-7ee7-4c32-82ff-f3e2aa475513",
                            CategoryName = "Waters",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Image = "water.jpg"
                        },
                        new
                        {
                            Id = "826e73af-d07c-4c8f-8b5d-422d358c862a",
                            CategoryName = "FuzzyDrinks",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Image = "orange-juice.jpg"
                        });
                });

            modelBuilder.Entity("Models.Models.Customer", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ShoppingCardId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ShoppingCardId");

                    b.HasIndex("UserId");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("Models.Models.Drink", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DrinkName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("Drinks");

                    b.HasData(
                        new
                        {
                            Id = "3f88cbdd-5363-4929-b7c5-8618735f7cd2",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DrinkName = "Merlot",
                            Image = "wine.jpg",
                            Price = 20m
                        },
                        new
                        {
                            Id = "6647a87f-fd6b-4a5f-b32a-ac6caa2f7799",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DrinkName = "Spring life",
                            Image = "water.jpg",
                            Price = 3m
                        },
                        new
                        {
                            Id = "95896f9c-0d43-492e-917f-c15c02e69e0d",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DrinkName = "Orange juice",
                            Image = "orange-juice.jpg",
                            Price = 3m
                        });
                });

            modelBuilder.Entity("Models.Models.DrinkCategory", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CategoryId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DrinkId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("DrinkId");

                    b.ToTable("DrinkCategories");

                    b.HasData(
                        new
                        {
                            Id = "57e1f858-9a6a-4cb2-8345-7756c3e3aca4",
                            CategoryId = "eba58732-68f5-4402-9b43-c53c273be3ae",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DrinkId = "3f88cbdd-5363-4929-b7c5-8618735f7cd2"
                        },
                        new
                        {
                            Id = "0d6ff9e5-b389-4f5f-9d1d-e51d49c238ca",
                            CategoryId = "3fa2ca26-7ee7-4c32-82ff-f3e2aa475513",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DrinkId = "6647a87f-fd6b-4a5f-b32a-ac6caa2f7799"
                        },
                        new
                        {
                            Id = "5fe0be95-ec01-4be8-999d-cb5f474c03e6",
                            CategoryId = "826e73af-d07c-4c8f-8b5d-422d358c862a",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DrinkId = "95896f9c-0d43-492e-917f-c15c02e69e0d"
                        });
                });

            modelBuilder.Entity("Models.Models.Ingradient", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("IngradientMetricId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("IngradientName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("IngradientMetricId");

                    b.ToTable("Ingradients");

                    b.HasData(
                        new
                        {
                            Id = "b5637498-7611-40a4-a2e4-a44308f86cfd",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IngradientMetricId = "1c1d9b90-b176-4559-8b60-2117c8cd936b",
                            IngradientName = "Egg"
                        },
                        new
                        {
                            Id = "92135d09-650a-4935-b66c-b8bfa453abd8",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IngradientMetricId = "9be109fc-e4d4-49e8-bf40-08503af047c8",
                            IngradientName = "Meet"
                        },
                        new
                        {
                            Id = "9c67d693-c69d-4e67-bd92-27d7f782d95b",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IngradientMetricId = "9aa1ecff-7228-4c5a-a10d-bbf68d6a2e52",
                            IngradientName = "Milk"
                        },
                        new
                        {
                            Id = "48f1f4c9-3c6a-4e38-a55b-5a4cb7bfa828",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IngradientMetricId = "9be109fc-e4d4-49e8-bf40-08503af047c8",
                            IngradientName = "Sugar"
                        });
                });

            modelBuilder.Entity("Models.Models.IngradientMetric", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("MetricValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("IngradientMetrics");

                    b.HasData(
                        new
                        {
                            Id = "9be109fc-e4d4-49e8-bf40-08503af047c8",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MetricValue = "Grams"
                        },
                        new
                        {
                            Id = "9aa1ecff-7228-4c5a-a10d-bbf68d6a2e52",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MetricValue = "Liters"
                        },
                        new
                        {
                            Id = "1c1d9b90-b176-4559-8b60-2117c8cd936b",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MetricValue = "Number"
                        });
                });

            modelBuilder.Entity("Models.Models.Meal", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MealCategoryId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("MealDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MealName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("RecipeId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TimeForPrepare")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MealCategoryId");

                    b.HasIndex("RecipeId");

                    b.ToTable("Meals");

                    b.HasData(
                        new
                        {
                            Id = "1d4becb0-14a4-4fa5-85e2-78efddc6e0a4",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Image = "pizza.jpg",
                            MealCategoryId = "8ec4e65f-5ab9-4b69-9587-a66949725fcb",
                            MealName = "Pizza",
                            Price = 10m,
                            RecipeId = "cd98c5c9-0387-4bcc-81bb-5cd32b67586e"
                        },
                        new
                        {
                            Id = "d49e0dcf-52fa-4d3e-a1f6-3eac1dc33a80",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Image = "chicken.jpg",
                            MealCategoryId = "15f9b12b-7a13-4bd7-a743-d218f01cd62c",
                            MealName = "Chicken soup",
                            Price = 20m,
                            RecipeId = "48e60ec5-708c-494b-9a2b-e1f657176316"
                        },
                        new
                        {
                            Id = "a087f175-435f-40cd-b18b-14eb4aa36d1d",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Image = "cake.jpg",
                            MealCategoryId = "a6aadab4-f1fa-4be1-aea6-b3d4bebdaa69",
                            MealName = "Cake",
                            Price = 5m,
                            RecipeId = "73b53609-5050-4e2a-86a8-0f3cc96f6481"
                        },
                        new
                        {
                            Id = "a44cfeee-bc74-43a1-99ea-cd70e951b444",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Image = "fish.jpg",
                            MealCategoryId = "8ec4e65f-5ab9-4b69-9587-a66949725fcb",
                            MealName = "Fish",
                            Price = 15m
                        },
                        new
                        {
                            Id = "7563fec9-e526-4138-935e-d95d90308ae1",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Image = "fish-soup.jpg",
                            MealCategoryId = "15f9b12b-7a13-4bd7-a743-d218f01cd62c",
                            MealName = "Fish soup",
                            Price = 10m,
                            RecipeId = "b16dfcf6-3b8a-43f1-a35d-dae3b45ecc85"
                        },
                        new
                        {
                            Id = "a855b058-af2f-4b3c-8967-710188d87407",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Image = "pancakes.jpg",
                            MealCategoryId = "a6aadab4-f1fa-4be1-aea6-b3d4bebdaa69",
                            MealName = "Pancakes",
                            Price = 7m,
                            RecipeId = "189d7f40-8c18-4f86-9be2-e0d5c2ffd6e6"
                        });
                });

            modelBuilder.Entity("Models.Models.MealRate", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("MealId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Rate")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MealId");

                    b.ToTable("MealRates");

                    b.HasData(
                        new
                        {
                            Id = "1acb8a20-d8e3-4023-b174-eaf23ea0bb52",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MealId = "a087f175-435f-40cd-b18b-14eb4aa36d1d",
                            Rate = 8
                        },
                        new
                        {
                            Id = "5ddf74b0-a347-437c-8d12-5b4d61083e0f",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MealId = "a087f175-435f-40cd-b18b-14eb4aa36d1d",
                            Rate = 9
                        },
                        new
                        {
                            Id = "eddd5131-e649-424f-906b-1f089f9bf82b",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MealId = "d49e0dcf-52fa-4d3e-a1f6-3eac1dc33a80",
                            Rate = 9
                        },
                        new
                        {
                            Id = "d50a3b15-e713-4156-bae6-ea0bb7c32205",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MealId = "d49e0dcf-52fa-4d3e-a1f6-3eac1dc33a80",
                            Rate = 7
                        },
                        new
                        {
                            Id = "8e975ee1-9b92-4f40-a32d-026b3635ce62",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MealId = "1d4becb0-14a4-4fa5-85e2-78efddc6e0a4",
                            Rate = 10
                        },
                        new
                        {
                            Id = "bce1f425-4b5e-4899-975d-f398c721648d",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MealId = "1d4becb0-14a4-4fa5-85e2-78efddc6e0a4",
                            Rate = 9
                        });
                });

            modelBuilder.Entity("Models.Models.Menu", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MenuName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Menus");

                    b.HasData(
                        new
                        {
                            Id = "62ac4246-a09d-4405-b79e-a5a20447f179",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Image = "book_left_image.jpg",
                            MenuName = "Standard"
                        });
                });

            modelBuilder.Entity("Models.Models.MenuMealCategory", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("MealCategoryId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("MenuId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("MealCategoryId");

                    b.HasIndex("MenuId");

                    b.ToTable("MenuMealCategories");

                    b.HasData(
                        new
                        {
                            Id = "d89e6d87-b3bb-4fde-85cf-1ebc531dce9d",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MealCategoryId = "15f9b12b-7a13-4bd7-a743-d218f01cd62c",
                            MenuId = "62ac4246-a09d-4405-b79e-a5a20447f179"
                        },
                        new
                        {
                            Id = "7ff90181-dee5-4702-a4d5-c49f4ee5f132",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MealCategoryId = "8ec4e65f-5ab9-4b69-9587-a66949725fcb",
                            MenuId = "62ac4246-a09d-4405-b79e-a5a20447f179"
                        },
                        new
                        {
                            Id = "3fcb6c52-2152-403c-ae79-96b5e55741f3",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MealCategoryId = "a6aadab4-f1fa-4be1-aea6-b3d4bebdaa69",
                            MenuId = "62ac4246-a09d-4405-b79e-a5a20447f179"
                        });
                });

            modelBuilder.Entity("Models.Models.Order", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CustomerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("HasPaid")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("OrderComment")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<bool>("isFinished")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Models.Models.OrderDrinks", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DrinkId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("OrderId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("SubTotal")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("DrinkId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderDrinks");
                });

            modelBuilder.Entity("Models.Models.OrderMeals", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("MealId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("OrderId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("Statuses")
                        .HasColumnType("int");

                    b.Property<decimal>("SubTotal")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("MealId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderMeals");
                });

            modelBuilder.Entity("Models.Models.Recipe", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MealName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("TimeForPrepare")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Recipes");

                    b.HasData(
                        new
                        {
                            Id = "73b53609-5050-4e2a-86a8-0f3cc96f6481",
                            CreatedAt = new DateTime(2020, 8, 12, 13, 28, 22, 792, DateTimeKind.Local).AddTicks(2070),
                            Description = "First add ...",
                            MealName = "Cake",
                            TimeForPrepare = "30min"
                        },
                        new
                        {
                            Id = "48e60ec5-708c-494b-9a2b-e1f657176316",
                            CreatedAt = new DateTime(2020, 8, 12, 13, 28, 22, 797, DateTimeKind.Local).AddTicks(8753),
                            Description = "First add ...",
                            MealName = "Chiken soup",
                            TimeForPrepare = "20min"
                        },
                        new
                        {
                            Id = "189d7f40-8c18-4f86-9be2-e0d5c2ffd6e6",
                            CreatedAt = new DateTime(2020, 8, 12, 13, 28, 22, 797, DateTimeKind.Local).AddTicks(8983),
                            Description = "First add ...",
                            MealName = "Pancakes",
                            TimeForPrepare = "20min"
                        },
                        new
                        {
                            Id = "b16dfcf6-3b8a-43f1-a35d-dae3b45ecc85",
                            CreatedAt = new DateTime(2020, 8, 12, 13, 28, 22, 797, DateTimeKind.Local).AddTicks(8932),
                            Description = "First add ...",
                            MealName = "Fish soup",
                            TimeForPrepare = "20min"
                        },
                        new
                        {
                            Id = "cd98c5c9-0387-4bcc-81bb-5cd32b67586e",
                            CreatedAt = new DateTime(2020, 8, 12, 13, 28, 22, 797, DateTimeKind.Local).AddTicks(9006),
                            Description = "First add ...",
                            MealName = "Pizza",
                            TimeForPrepare = "20min"
                        },
                        new
                        {
                            Id = "675957d9-0651-4052-b372-88372f0b2853",
                            CreatedAt = new DateTime(2020, 8, 12, 13, 28, 22, 797, DateTimeKind.Local).AddTicks(9024),
                            Description = "First add ...",
                            MealName = "Fish",
                            TimeForPrepare = "20min"
                        });
                });

            modelBuilder.Entity("Models.Models.RecipeIngradients", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("IngradientId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("IngradientQuantity")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("RecipeId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("IngradientId");

                    b.HasIndex("RecipeId");

                    b.ToTable("RecepeeIngradients");
                });

            modelBuilder.Entity("Models.Models.ShoppingCard", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("CardStatus")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("ShoppingCards");
                });

            modelBuilder.Entity("Models.Models.IdentityModels.User", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.HasDiscriminator().HasValue("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Models.Models.Customer", b =>
                {
                    b.HasOne("Models.Models.ShoppingCard", "ShoppingCard")
                        .WithMany()
                        .HasForeignKey("ShoppingCardId");

                    b.HasOne("Models.Models.IdentityModels.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Models.Models.DrinkCategory", b =>
                {
                    b.HasOne("Models.Models.Category", "Category")
                        .WithMany("DrinkCategories")
                        .HasForeignKey("CategoryId");

                    b.HasOne("Models.Models.Drink", "Drink")
                        .WithMany("DrinkCategories")
                        .HasForeignKey("DrinkId");
                });

            modelBuilder.Entity("Models.Models.Ingradient", b =>
                {
                    b.HasOne("Models.Models.IngradientMetric", "IngradientMetric")
                        .WithMany("Ingradients")
                        .HasForeignKey("IngradientMetricId");
                });

            modelBuilder.Entity("Models.Models.Meal", b =>
                {
                    b.HasOne("Models.Models.Category", "MealCategory")
                        .WithMany("Meals")
                        .HasForeignKey("MealCategoryId");

                    b.HasOne("Models.Models.Recipe", "Recipe")
                        .WithMany()
                        .HasForeignKey("RecipeId");
                });

            modelBuilder.Entity("Models.Models.MealRate", b =>
                {
                    b.HasOne("Models.Models.Meal", "Meal")
                        .WithMany("MealRates")
                        .HasForeignKey("MealId");
                });

            modelBuilder.Entity("Models.Models.MenuMealCategory", b =>
                {
                    b.HasOne("Models.Models.Category", "MealCategory")
                        .WithMany("MenuMealCategories")
                        .HasForeignKey("MealCategoryId");

                    b.HasOne("Models.Models.Menu", "Menu")
                        .WithMany("MenuMealCategories")
                        .HasForeignKey("MenuId");
                });

            modelBuilder.Entity("Models.Models.Order", b =>
                {
                    b.HasOne("Models.Models.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId");
                });

            modelBuilder.Entity("Models.Models.OrderDrinks", b =>
                {
                    b.HasOne("Models.Models.Drink", "Drink")
                        .WithMany("OrderDrinks")
                        .HasForeignKey("DrinkId");

                    b.HasOne("Models.Models.Order", "Order")
                        .WithMany("OrderDrinks")
                        .HasForeignKey("OrderId");
                });

            modelBuilder.Entity("Models.Models.OrderMeals", b =>
                {
                    b.HasOne("Models.Models.Meal", "Meal")
                        .WithMany("OrderMeals")
                        .HasForeignKey("MealId");

                    b.HasOne("Models.Models.Order", "Order")
                        .WithMany("OrderedMeals")
                        .HasForeignKey("OrderId");
                });

            modelBuilder.Entity("Models.Models.RecipeIngradients", b =>
                {
                    b.HasOne("Models.Models.Ingradient", "Ingradient")
                        .WithMany("RecepeeIngradients")
                        .HasForeignKey("IngradientId");

                    b.HasOne("Models.Models.Recipe", "Recipe")
                        .WithMany("RecepeeIngradients")
                        .HasForeignKey("RecipeId");
                });
#pragma warning restore 612, 618
        }
    }
}
